name: Build and Test

# on: [push, pull_request]
on:
  push:
    branches:
      - main   # tagged latest
      - master # tagged latest
      - dev    # tagged test
      - init
    tags:
      - v* # semver release
  pull_request: # runs tests
  workflow_dispatch: {}

env:
  NAME: node-exe
  CONAN_REMOTE: kth
  CONAN_REMOTE_URL: https://knuth.jfrog.io/artifactory/api/conan/knuth

jobs:

  check:
    runs-on: ubuntu-latest
    outputs:
      permitted: ${{ steps.check.outputs.permitted }}
    steps:
      - id: check
        continue-on-error: true
        uses: prince-chrismc/check-actor-permissions-action@v2
        with:
          permission: write

  setup:
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.build-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - id: version
        uses: ./ci_utils/.github/actions/determine-version
        with:
          github-ref: ${{ github.ref }}
          run-number: ${{ github.run_number }}

  # build-base-docker-image:
  #   name: Builds Alpine Docker image
  #   runs-on: ubuntu-latest
  #   outputs:
  #     # name: docker.pkg.github.com/${{ github.repository }}/alpine-image:${{ steps.version.outputs.version }}
  #     name: docker.pkg.github.com/k-nuth/kth/alpine-image:${{ steps.version.outputs.version }}
  #   env:
  #     # name: docker.pkg.github.com/${{ github.repository }}/alpine-image
  #     name: docker.pkg.github.com/k-nuth/kth/alpine-image
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true
  #     - id: version
  #       run: echo "version=${{ hashFiles('./ci_utils/Dockerfile.build') }}" >> $GITHUB_OUTPUT
  #     - uses: docker/login-action@v2
  #       with:
  #         registry: docker.pkg.github.com
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - id: check
  #       name: check existence
  #       run: |
  #         docker pull ${{ env.name }}:${{ steps.version.outputs.version }} > /dev/null && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT
  #     - if: ${{ steps.check.outputs.exists == 'false' }}
  #       run: docker build . --file ./ci_utils/Dockerfile.build --tag ${{ env.name }}:${{ steps.version.outputs.version }}
  #     - if: ${{ steps.check.outputs.exists == 'false' }}
  #       run: docker push ${{ env.name }}:${{ steps.version.outputs.version }}

  calc-deps:
    name: Dependencies Calculation
    needs: [setup, check]
    if: needs.check.outputs.permitted == 'true'
    runs-on: ubuntu-latest
    container:
      image: "kthnode/gcc12-ubuntu18.04"
      # image: ${{ needs.build-base-docker-image.outputs.name }}
      # credentials:
      #   username: ${{ github.repository_owner }}
      #   password: ${{ github.token }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: alpine-${{ hashFiles('**/conan.lock') }}
      - uses: ./ci_utils/.github/actions/setup-conan
      - uses: ./ci_utils/.github/actions/setup-kthbuild
      - name: conan login
        # run: conan user -p ${{ secrets.CONAN_PASSWORD }} -r $CONAN_REMOTE ${{ secrets.CONAN_LOGIN_USERNAME }}
        run: conan remote login -p ${{ secrets.CONAN_PASSWORD }} $CONAN_REMOTE ${{ secrets.CONAN_LOGIN_USERNAME }}

      - name: build order
        working-directory: .
        run: |
          conan lock create conanfile.py --version ${{ needs.setup.outputs.build-version }} --lockfile=conan.lock --lockfile-out=build/conan.lock -pr linux-ci-cd -s build_type=Release
          # conan lock build-order build/conan.lock --json=build_order.json
          conan graph build-order conanfile.py --lockfile=build/conan.lock -f json > build_order.json
      - uses: actions/upload-artifact@v3
        with:
          name: conan-lockfile
          path: build/conan.lock
      - id: set-matrix
        name: output
        run: |
          cp ./ci_utils/.github/matrix.json platform.json
          echo $(cat build_order.json)
          # cd backend
          python3 ./ci_utils/build-order-to-matrix.py
          MATRIX=$(cat matrix.json)
          echo "${MATRIX}"
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  build-deps-with-container:
    needs: [calc-deps]
    strategy:
      matrix: ${{ fromJson(needs.calc-deps.outputs.matrix) }}
    name: ${{ matrix.config.name }}
    uses: k-nuth/ci-utils/.github/workflows/build-deps-with-container.yml@master
    with:
      if: ${{ matrix.config.compiler == 'GCC' }}
      os: ${{ matrix.config.os }}
      image: "kthnode/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}"
      reference: ${{ matrix.config.reference }}
      conan-remote: "kth"
    secrets:
      conan-user: ${{ secrets.CONAN_LOGIN_USERNAME }}
      conan-password: ${{ secrets.CONAN_PASSWORD }}

  build-deps-without-container:
    needs: [calc-deps]
    strategy:
      matrix: ${{ fromJson(needs.calc-deps.outputs.matrix) }}
    name: ${{ matrix.config.name }}
    uses: k-nuth/ci-utils/.github/workflows/build-deps-without-container.yml@master
    with:
      if: ${{ matrix.config.compiler != 'GCC' }}
      os: ${{ matrix.config.os }}
      reference: ${{ matrix.config.reference }}
      conan-remote: "kth"
    secrets:
      conan-user: ${{ secrets.CONAN_LOGIN_USERNAME }}
      conan-password: ${{ secrets.CONAN_PASSWORD }}

  generate-matrix:
    name: Generate Job Matrix
    # needs: wait-for-dependencies
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Generate Job Matrix
        id: set-matrix
        run: |
          MATRIX=$(cat ./ci_utils/.github/matrix.json)
          echo "${MATRIX}"
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

          # echo "::set-output name=matrix::${MATRIX}"
          # # JSON=$(cat ./ci_utils/.github/matrix.json)
          # # echo "::set-output name=${JSON//'%'/'%25'}"

  build-with-container:
    needs: [setup, generate-matrix]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}
    uses: k-nuth/ci-utils/.github/workflows/build-with-container.yml@master
    with:
      if: ${{ matrix.config.compiler == 'GCC' }}
      upload: ${{ github.event_name == 'push' }} # && needs.check.outputs.permitted == 'true'
      os: ${{ matrix.config.os }}
      image: "kthnode/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}"
      conan-remote: "kth"
      recipe-name: "node-exe"
      compiler: ${{ matrix.config.compiler }}
      compiler-version: ${{ matrix.config.version }}
      version-file: "src/version.hpp"
      build-version: "${{ needs.setup.outputs.build-version }}"

    secrets:
      CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}

  build-without-container:
    needs: [setup, generate-matrix]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}
    uses: k-nuth/ci-utils/.github/workflows/build-without-container.yml@master
    with:
      if: ${{ matrix.config.compiler != 'GCC' }}
      upload: ${{ github.event_name == 'push' }} # && needs.check.outputs.permitted == 'true'
      os: ${{ matrix.config.os }}
      conan-remote: "kth"
      recipe-name: "node-exe"
      compiler: ${{ matrix.config.compiler }}
      compiler-version: ${{ matrix.config.version }}
      version-file: "src/version.hpp"
      build-version: "${{ needs.setup.outputs.build-version }}"
    secrets:
      CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}








  # builds:
  #   needs: [build-deps-with-container, generate-matrix]
  #   runs-on: ${{ matrix.config.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
  #   name: ${{ matrix.config.name }}
  #   steps:
  #     - name: Set git to use LF (Windows)
  #       if: ${{ matrix.config.compiler == 'Visual Studio' }}
  #       run: |
  #         git config --global core.autocrlf false
  #         git config --global core.eol lf
  #         # git config --global --edit
  #         # git config --global core.autocrlf true
  #         # git config --global --edit
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true

  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"

  #     - uses: ./ci_utils/.github/actions/setup-conan
  #     - uses: ./ci_utils/.github/actions/setup-kthbuild
  #     - uses: lukka/get-cmake@latest

  #     # - name: Install Dependencies (Unix)
  #     #   if: ${{ matrix.config.compiler != 'Visual Studio' }}
  #     #   run: |
  #     #     chmod +x ci_utils/.ci-cd/install.sh
  #     #     ./ci_utils/.ci-cd/install.sh
  #     #   shell: bash

  #     # - name: Install Dependencies (Windows)
  #     #   if: ${{ matrix.config.compiler == 'Visual Studio' }}
  #     #   run: |
  #     #     set PATH=%PYTHON%;%PYTHON%/Scripts/;%PATH%;
  #     #     python.exe --version
  #     #     cmake --version
  #     #     python.exe -m pip install --upgrade pip
  #     #     pip.exe install conan_package_tools==0.39.0
  #     #     pip.exe install kthbuild --upgrade
  #     #     pip.exe install conan==1.51.2
  #     #     conan user
  #     #   shell: cmd

  #     - name: Settting EnvVars (Linux)
  #       if: ${{ matrix.config.compiler == 'GCC' }}
  #       shell: bash
  #       run: |
  #         echo "CONAN_GCC_VERSIONS=${{ matrix.config.version }}" >> $GITHUB_ENV
  #         echo "CONAN_DOCKER_IMAGE=conanio/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}" >> $GITHUB_ENV

  #     - name: Settting EnvVars (macOS)
  #       if: ${{ matrix.config.compiler == 'apple-clang' }}
  #       shell: bash
  #       run: |
  #         echo "CONAN_APPLE_CLANG_VERSIONS=${{ matrix.config.version }}.0" >> $GITHUB_ENV

  #     - name: Settting EnvVars (Windows)
  #       if: ${{ matrix.config.compiler == 'Visual Studio' }}
  #       # shell: bash
  #       shell: powershell
  #       run: |
  #         echo "CONAN_VISUAL_VERSIONS=${{ matrix.config.version }}" >> $Env:GITHUB_ENV
  #         echo "CONAN_VISUAL_RUNTIMES=${{ matrix.config.msvc_runtime }}" >> $Env:GITHUB_ENV
  #         # echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $env:GITHUB_ENV

  #     - name: Build (Unix)
  #       if: ${{ matrix.config.compiler != 'Visual Studio' }}
  #       env:
  #         CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
  #         CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
  #         CONAN_LOGIN_USERNAME_UPLOAD_REPO: ${{ secrets.CONAN_LOGIN_USERNAME_UPLOAD_REPO }}
  #         CONAN_PASSWORD_UPLOAD_REPO: ${{ secrets.CONAN_PASSWORD_UPLOAD_REPO }}
  #         CONAN_STABLE_BRANCH_PATTERN: "master$" #"release/*"
  #         CONAN_DISABLE_STRICT_MODE: 1          # Remove after implementing Conan v2
  #         # CONAN_BUILD_POLICY: "missing"
  #       shell: bash
  #       run: |
  #         echo ${{ matrix.config.compiler }}
  #         echo ${BPT_MATRIX}
  #         echo ${CONAN_STABLE_BRANCH_PATTERN}
  #         echo ${CONAN_GCC_VERSIONS}
  #         echo ${CONAN_APPLE_CLANG_VERSIONS}
  #         echo ${CONAN_DOCKER_IMAGE}
  #         echo ${CONAN_LOGIN_USERNAME}
  #         echo ${CONAN_LOGIN_USERNAME_UPLOAD_REPO}
  #         echo ${CONAN_LOGIN_USERNAME}
  #         echo ${CONAN_DOCKER_ENTRY_SCRIPT}
  #         echo ${CONAN_DISABLE_STRICT_MODE}
  #         # echo ${CONAN_BUILD_POLICY}

  #         export KTH_BRANCH=$(echo '${{ github.ref }}' | awk -F '/' '{print $3}')
  #         echo "My branch name is $KTH_BRANCH"

  #         chmod +x ci_utils/.ci-cd/run.sh
  #         ./ci_utils/.ci-cd/run.sh

  #     - name: Build (Windows)
  #       if: ${{ matrix.config.compiler == 'Visual Studio' }}
  #       env:
  #         CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
  #         CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
  #         CONAN_LOGIN_USERNAME_UPLOAD_REPO: ${{ secrets.CONAN_LOGIN_USERNAME_UPLOAD_REPO }}
  #         CONAN_PASSWORD_UPLOAD_REPO: ${{ secrets.CONAN_PASSWORD_UPLOAD_REPO }}
  #         CONAN_STABLE_BRANCH_PATTERN: "master$" #"release/*"
  #         CONAN_DISABLE_STRICT_MODE: 1          # Remove after implementing Conan v2
  #         # CONAN_BUILD_POLICY: "missing"

  #       shell: powershell
  #       run: |
  #         # echo ${{ matrix.config.compiler }}
  #         # echo %BPT_MATRIX%
  #         # echo %CONAN_STABLE_BRANCH_PATTERN%
  #         # echo %CONAN_LOGIN_USERNAME%

  #         Write-Host "CONAN_VISUAL_VERSIONS: $Env:CONAN_VISUAL_VERSIONS"
  #         Write-Host "CONAN_VISUAL_RUNTIMES: $Env:CONAN_VISUAL_RUNTIMES"
  #         # Write-Host "CONAN_BUILD_POLICY: $Env:CONAN_BUILD_POLICY"

  #         $Env:KTH_BRANCH = "${{ github.ref }}".Split("/")[2]
  #         Write-Host "My branch name is $Env:KTH_BRANCH"

  #         $a = python ci_utils/set_envvars_and_files.py
  #         Write-Host $a
  #         Invoke-Expression $a

  #         $ErrorActionPreference = 'SilentlyContinue'
  #         conan remote add kth https://knuth.jfrog.io/artifactory/api/conan/knuth
  #         $ErrorActionPreference = 'Continue'

  #         # python ci_utils/process_conan_reqs.py

  #         $ErrorActionPreference = 'SilentlyContinue'
  #         conan remove "*" -f
  #         conan remote remove kth
  #         conan remote remove kthbuild_kth_temp_
  #         $ErrorActionPreference = 'Continue'

  #         python build.py

  static-checks:
    # needs: wait-for-dependencies
    name: Static Checks
    if: github.ref == 'refs/heads/devX' ||
        startsWith(github.ref, 'refs/heads/testci') ||
        startsWith(github.ref, 'refs/heads/release') ||
        startsWith(github.ref, 'refs/heads/hotfix')

    runs-on: ubuntu-20.04
    steps:
      - name: Static Checks
        shell: bash
        run: |
          echo ${{github.ref}}

  # upload-aliases:
  #   name: Upload Aliases
  #   needs: [builds, static-checks]
  #   if: github.ref == 'refs/heads/devX' ||
  #       startsWith(github.ref, 'refs/heads/testci') ||
  #       startsWith(github.ref, 'refs/heads/release') ||
  #       startsWith(github.ref, 'refs/heads/hotfix') ||
  #       startsWith(github.ref, 'refs/heads/feature')
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"

  #     - name: Install Dependencies
  #       run: |
  #         chmod +x ci_utils/.ci-cd/install.sh
  #         ./ci_utils/.ci-cd/install.sh
  #       shell: bash

  #     - name: Upload Aliases
  #       env:
  #         CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
  #         CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
  #         CONAN_LOGIN_USERNAME_UPLOAD_REPO: ${{ secrets.CONAN_LOGIN_USERNAME_UPLOAD_REPO }}
  #         CONAN_PASSWORD_UPLOAD_REPO: ${{ secrets.CONAN_PASSWORD_UPLOAD_REPO }}
  #         CONAN_BUILD_POLICY: "missing"
  #       shell: bash
  #       run: |

  #         # echo "REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')" >> $GITHUB_ENV
  #         REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
  #         echo "My repo name is $REPO_NAME"

  #         export KTH_BRANCH=$(echo '${{ github.ref }}' | awk -F '/' '{print $3}')
  #         echo "My branch name is $KTH_BRANCH"

  #         eval $(python ci_utils/set_envvars_and_files.py)
  #         # conan remote add kthbuild_kth_temp_ https://knuth.jfrog.io/artifactory/api/conan/knuth
  #         conan user
  #         conan user ${CONAN_LOGIN_USERNAME} -r kthbuild_kth_temp_ -p ${CONAN_PASSWORD}
  #         conan user
  #         echo "conan alias ${REPO_NAME}/0.X@kth/${KTH_CONAN_CHANNEL} ${REPO_NAME}/${KTH_CONAN_VERSION}@kth/${KTH_CONAN_CHANNEL}"
  #         conan alias "${REPO_NAME}/0.X@kth/${KTH_CONAN_CHANNEL}" "${REPO_NAME}/${KTH_CONAN_VERSION}@kth/${KTH_CONAN_CHANNEL}"
  #         echo "conan upload ${REPO_NAME}/0.X@kth/${KTH_CONAN_CHANNEL} --all -r kthbuild_kth_temp_"
  #         conan upload "${REPO_NAME}/0.X@kth/${KTH_CONAN_CHANNEL}" --all -r kthbuild_kth_temp_













































  # master:
  #   name: Master and Dev
  #   if: github.ref == 'refs/heads/master' ||
  #       github.ref == 'refs/heads/dev'
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Master Build
  #       shell: bash
  #       run: |
  #         echo "Stable packages are published in Release branches"

  # wait-for-dependencies:
  #   name: Wait for dependencies (modules)
  #   if: github.ref == 'refs/heads/devX' ||
  #       startsWith(github.ref, 'refs/heads/testci') ||
  #       startsWith(github.ref, 'refs/heads/release') ||
  #       startsWith(github.ref, 'refs/heads/hotfix')

  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v3
  #       if: startsWith(github.ref, 'refs/heads/testci') ||
  #           startsWith(github.ref, 'refs/heads/release') ||
  #           startsWith(github.ref, 'refs/heads/hotfix')

  #       with:
  #         submodules: true
  #     - uses: actions/setup-python@v4
  #       if: startsWith(github.ref, 'refs/heads/testci') ||
  #           startsWith(github.ref, 'refs/heads/release') ||
  #           startsWith(github.ref, 'refs/heads/hotfix')
  #       with:
  #         python-version: "3.10"

  #     - name: Install software
  #       if: startsWith(github.ref, 'refs/heads/testci') ||
  #           startsWith(github.ref, 'refs/heads/release') ||
  #           startsWith(github.ref, 'refs/heads/hotfix')
  #       run: |
  #         chmod +x ci_utils/.ci-cd/install.sh
  #         ./ci_utils/.ci-cd/install.sh
  #       shell: bash

  #     - name: Wait for dependencies (modules)
  #       if: startsWith(github.ref, 'refs/heads/testci') ||
  #           startsWith(github.ref, 'refs/heads/release') ||
  #           startsWith(github.ref, 'refs/heads/hotfix')
  #       env:
  #         CONAN_GCC_VERSIONS: 10
  #         CONAN_DOCKER_IMAGE: conanio/gcc10

  #       shell: bash
  #       run: |
  #         conan user
  #         conan remote list
  #         conan remote add kthbuild_kth_temp_ https://knuth.jfrog.io/artifactory/api/conan/knuth || true
  #         conan remote list
  #         # echo "KTH_REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')" >> $GITHUB_ENV
  #         export KTH_REPO_NAME=$(echo '${{ github.repository }}')
  #         echo "My repo name is $KTH_REPO_NAME"
  #         python ci_utils/wait_for_deps.py

  #     - name: Dummy Step for dev branch
  #       if: github.ref == 'refs/heads/devX'
  #       shell: bash
  #       run: |
  #         echo "Nothing to do!"





  # build-deps-with-container:
  #   needs: [build-base-docker-image, calc-deps]
  #   strategy:
  #     matrix: ${{ fromJson(needs.calc-deps.outputs.matrix) }}
  #   name: ${{ matrix.config.name }}
  #   runs-on: ${{ matrix.config.os }}

  #   # container:
  #   #   image: ${{ needs.build-base-docker-image.outputs.name }}
  #   #   credentials:
  #   #     username: ${{ github.repository_owner }}
  #   #     password: ${{ github.token }}

  #   # container:
  #   #   image: "conanio/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}"

  #   container:
  #     image: "kthnode/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}"
  #     # image: "kthnode/gcc12-ubuntu18.04"

  #   steps:
  #     - uses: actions/checkout@v3
  #     - if: ${{ matrix.reference != 'null' }}
  #       uses: ./ci_utils/.github/actions/setup-conan
  #     - if: ${{ matrix.reference != 'null' }}
  #       uses: ./ci_utils/.github/actions/setup-kthbuild
  #     - if: ${{ matrix.reference != 'null' }}
  #       # run: conan user -p ${{ secrets.CONAN_PASSWORD }} -r $CONAN_REMOTE ${{ secrets.CONAN_LOGIN_USERNAME }}
  #       run: conan remote login -p ${{ secrets.CONAN_PASSWORD }} $CONAN_REMOTE ${{ secrets.CONAN_LOGIN_USERNAME }}
  #     - name: download
  #       if: ${{ matrix.reference != 'null' }}
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: conan-lockfile
  #     - name: build
  #       if: ${{ matrix.reference != 'null' }}
  #       run: conan install --requires=${{ matrix.reference }} -l conan.lock -b missing
  #     - name: upload
  #       if: ${{ matrix.reference != 'null' }}
  #       run: conan upload ${{ matrix.reference }} -r $CONAN_REMOTE # --all
  #     - run: exit 0




   # print-envs:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - run: |
  #         echo "env.CONAN_REMOTE: ${{ env.CONAN_REMOTE }}"
  #         echo "CONAN_REMOTE:     $CONAN_REMOTE"

  # print-envs-container:
  #   runs-on: ubuntu-20.04
  #   container:
  #     image: docker.pkg.github.com/k-nuth/kth/alpine-image
  #     credentials:
  #       username: ${{ github.repository_owner }}
  #       password: ${{ github.token }}
  #   steps:
  #     - run: |
  #         echo "env.CONAN_REMOTE: ${{ env.CONAN_REMOTE }}"
  #         echo "CONAN_REMOTE:     $CONAN_REMOTE"




  # build-deps:
  #   needs: [build-base-docker-image, calc-deps]
  #   strategy:
  #     matrix: ${{ fromJson(needs.calc-deps.outputs.matrix) }}
  #   name: ${{ matrix.config.name }}
  #   if: ${{ matrix.config.compiler == 'GCC' }}

  #   # if: ${{ matrix.config.compiler == 'GCC' }}
  #   # runs-on: ubuntu-latest
  #   # if: ${{ matrix.config.compiler != 'GCC' }}
  #   runs-on: ${{ matrix.config.os }}

  #   # if: ${{ matrix.config.compiler == 'GCC' }}
  #   # container:
  #   #   image: ${{ needs.build-base-docker-image.outputs.name }}
  #   #   credentials:
  #   #     username: ${{ github.repository_owner }}
  #   #     password: ${{ github.token }}

  #   container:
  #     image: "hub.docker.com/r/conanio/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}"
  #       # echo "CONAN_DOCKER_IMAGE=conanio/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}" >> $GITHUB_ENV

  #   steps:
  #     - name: Print OS
  #       run: |
  #         echo "Matrix 1:   ${{ matrix }}"
  #         echo "Matrix 2:   ${{ needs.calc-deps.outputs.matrix }}"
  #         echo "Matrix 3:   ${{ fromJson(needs.calc-deps.outputs.matrix) }}"
  #         echo "Include     ${{ matrix.config }}"
  #         echo "OS:         ${{ matrix.config.os }}"
  #         echo "Name:       ${{ matrix.config.name }}"

  #     # - uses: actions/checkout@v3
  #     # - if: ${{ matrix.reference != 'null' }}
  #     #   uses: ./ci_utils/.github/actions/setup-conan
  #     # - if: ${{ matrix.reference != 'null' }}
  #     #   uses: ./ci_utils/.github/actions/setup-kthbuild
  #     # - if: ${{ matrix.reference != 'null' }}
  #     #   # run: conan user -p ${{ secrets.CONAN_PASSWORD }} -r $CONAN_REMOTE ${{ secrets.CONAN_LOGIN_USERNAME }}
  #     #   run: conan remote login -p ${{ secrets.CONAN_PASSWORD }} $CONAN_REMOTE ${{ secrets.CONAN_LOGIN_USERNAME }}
  #     # - name: download
  #     #   if: ${{ matrix.reference != 'null' }}
  #     #   uses: actions/download-artifact@v3
  #     #   with:
  #     #     name: conan-lockfile
  #     # - name: build
  #     #   if: ${{ matrix.reference != 'null' }}
  #     #   run: conan install --requires=${{ matrix.reference }} -l conan.lock -b missing
  #     # - name: upload
  #     #   if: ${{ matrix.reference != 'null' }}
  #     #   run: conan upload ${{ matrix.reference }} -r $CONAN_REMOTE # --all
  #     # - run: exit 0

  # build-deps:
  #   needs: [build-base-docker-image, calc-deps]
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ${{ needs.build-base-docker-image.outputs.name }}
  #     credentials:
  #       username: ${{ github.repository_owner }}
  #       password: ${{ github.token }}
  #   strategy:
  #     matrix: ${{ fromJson(needs.calc-deps.outputs.matrix) }}
  #   name: ${{ matrix.include.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - if: ${{ matrix.reference != 'null' }}
  #       uses: ./ci_utils/.github/actions/setup-conan
  #     - if: ${{ matrix.reference != 'null' }}
  #       uses: ./ci_utils/.github/actions/setup-kthbuild
  #     - if: ${{ matrix.reference != 'null' }}
  #       # run: conan user -p ${{ secrets.CONAN_PASSWORD }} -r $CONAN_REMOTE ${{ secrets.CONAN_LOGIN_USERNAME }}
  #       run: conan remote login -p ${{ secrets.CONAN_PASSWORD }} $CONAN_REMOTE ${{ secrets.CONAN_LOGIN_USERNAME }}
  #     - name: download
  #       if: ${{ matrix.reference != 'null' }}
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: conan-lockfile
  #     - name: build
  #       if: ${{ matrix.reference != 'null' }}
  #       run: conan install --requires=${{ matrix.reference }} -l conan.lock -b missing
  #     - name: upload
  #       if: ${{ matrix.reference != 'null' }}
  #       run: conan upload ${{ matrix.reference }} -r $CONAN_REMOTE # --all
  #     - run: exit 0