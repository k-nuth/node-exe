name: Build and Test

# on: [push, pull_request]
on:
  push:
    branches:
      - main   # tagged latest
      - master # tagged latest
      - dev    # tagged test
      - init
    tags:
      - v* # semver release
  pull_request: # runs tests
  workflow_dispatch: {}

env:
  NAME: kth

  CONAN_REMOTE: kth
  CONAN_REMOTE_URL: https://knuth.jfrog.io/artifactory/api/conan/knuth
  CONAN_REMOTE_2: kth2
  CONAN_REMOTE_2_URL: https://kthnode.jfrog.io/artifactory/api/conan/knuth

jobs:

  check:
    runs-on: ubuntu-latest
    outputs:
      permitted: ${{ steps.check.outputs.permitted }}
    steps:
      - id: check
        continue-on-error: true
        uses: prince-chrismc/check-actor-permissions-action@v2
        with:
          permission: write

  setup:
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.build-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - id: version
        uses: ./ci_utils/.github/actions/determine-version
        with:
          github-ref: ${{ github.ref }}
          run-number: ${{ github.run_number }}

  calc-deps:
    name: Dependencies Calculation
    needs: [setup, check]
    if: needs.check.outputs.permitted == 'true'
    runs-on: ubuntu-latest
    container:
      image: "kthnode/gcc12-ubuntu18.04"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: alpine-${{ hashFiles('**/conan.lock') }}
      - uses: ./ci_utils/.github/actions/setup-conan
      - uses: ./ci_utils/.github/actions/setup-kthbuild
      - name: conan login
        run: conan remote login -p ${{ secrets.CONAN_2_PASSWORD }} $CONAN_REMOTE_2 ${{ secrets.CONAN_LOGIN_2_USERNAME }}

      - name: build order
        working-directory: .
        run: |
          conan lock create conanfile.py --version ${{ needs.setup.outputs.build-version }} --lockfile=conan.lock --lockfile-out=build/conan.lock -pr linux-ci-cd -s build_type=Release
          # conan lock build-order build/conan.lock --json=build_order.json
          conan graph build-order conanfile.py --lockfile=build/conan.lock -f json > build_order.json
      - uses: actions/upload-artifact@v3
        with:
          name: conan-lockfile
          path: build/conan.lock
      - id: set-matrix
        name: output
        run: |
          cp ./ci_utils/.github/matrix.json platform.json
          echo $(cat build_order.json)
          # cd backend
          python3 ./ci_utils/build-order-to-matrix.py
          MATRIX=$(cat matrix.json)
          echo "${MATRIX}"
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  build-deps-with-container:
    needs: [calc-deps]
    strategy:
      matrix: ${{ fromJson(needs.calc-deps.outputs.matrix) }}
    name: ${{ matrix.config.name }}
    uses: k-nuth/ci-utils/.github/workflows/build-deps-with-container.yml@master
    with:
      if: ${{ matrix.config.compiler == 'GCC' }}
      os: ${{ matrix.config.os }}
      image: "kthnode/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}"
      reference: ${{ matrix.config.reference }}
      conan-remote: "kth2"
    secrets:
      conan-user: ${{ secrets.CONAN_LOGIN_2_USERNAME }}
      conan-password: ${{ secrets.CONAN_2_PASSWORD }}

  build-deps-without-container:
    needs: [calc-deps]
    strategy:
      matrix: ${{ fromJson(needs.calc-deps.outputs.matrix) }}
    name: ${{ matrix.config.name }}
    uses: k-nuth/ci-utils/.github/workflows/build-deps-without-container.yml@master
    with:
      if: ${{ matrix.config.compiler != 'GCC' }}
      os: ${{ matrix.config.os }}
      reference: ${{ matrix.config.reference }}
      conan-remote: "kth2"
    secrets:
      conan-user: ${{ secrets.CONAN_LOGIN_2_USERNAME }}
      conan-password: ${{ secrets.CONAN_2_PASSWORD }}

  generate-matrix:
    name: Generate Job Matrix
    # needs: wait-for-dependencies
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Generate Job Matrix
        id: set-matrix
        run: |
          MATRIX=$(cat ./ci_utils/.github/matrix.json)
          echo "${MATRIX}"
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

          # echo "::set-output name=matrix::${MATRIX}"
          # # JSON=$(cat ./ci_utils/.github/matrix.json)
          # # echo "::set-output name=${JSON//'%'/'%25'}"

  build-with-container:
    needs: [setup, generate-matrix]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}
    uses: k-nuth/ci-utils/.github/workflows/build-with-container.yml@master
    with:
      if: ${{ matrix.config.compiler == 'GCC' }}
      upload: ${{ github.event_name == 'push' }} # && needs.check.outputs.permitted == 'true'
      os: ${{ matrix.config.os }}
      image: "kthnode/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}"
      conan-remote: "kth2"
      recipe-name: "kth"
      compiler: ${{ matrix.config.compiler }}
      compiler-version: ${{ matrix.config.version }}
      version-file: "src/version.hpp"
      build-version: "${{ needs.setup.outputs.build-version }}"

    secrets:
      CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_2_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.CONAN_2_PASSWORD }}

  build-without-container:
    needs: [setup, generate-matrix]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}
    uses: k-nuth/ci-utils/.github/workflows/build-without-container.yml@master
    with:
      if: ${{ matrix.config.compiler != 'GCC' }}
      upload: ${{ github.event_name == 'push' }} # && needs.check.outputs.permitted == 'true'
      os: ${{ matrix.config.os }}
      conan-remote: "kth2"
      recipe-name: "kth"
      compiler: ${{ matrix.config.compiler }}
      compiler-version: ${{ matrix.config.version }}
      version-file: "src/version.hpp"
      build-version: "${{ needs.setup.outputs.build-version }}"
    secrets:
      CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_2_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.CONAN_2_PASSWORD }}

  static-checks:
    # needs: wait-for-dependencies
    name: Static Checks
    if: github.ref == 'refs/heads/devX' ||
        startsWith(github.ref, 'refs/heads/testci') ||
        startsWith(github.ref, 'refs/heads/release') ||
        startsWith(github.ref, 'refs/heads/hotfix')

    runs-on: ubuntu-20.04
    steps:
      - name: Static Checks
        shell: bash
        run: |
          echo ${{github.ref}}
